
import streamlit as st
from langchain.chains import RetrievalQA
from langchain.vectorstores import FAISS
from langchain.embeddings import OpenAIEmbeddings
from langchain.llms import OpenAI
from langchain.document_loaders import TextLoader
from langchain.docstore.document import Document
import os

# os.environ["OPENAI_API_KEY"] = st.secrets["OPENAI_API_KEY"]
st.set_page_config(page_title="Chatbot Thu H·ªìi N·ª£", layout="wide")
st.markdown("<h1 style='text-align: center;'>ü§ñ Chatbot Thu H·ªìi N·ª£</h1>", unsafe_allow_html=True)

@st.cache_resource
def load_chain():
    # T√≠ch h·ª£p SOP n·ªôi b·ªô tr·ª±c ti·∫øp trong code
    sop_text = """
    Q: N·∫øu kh√°ch h√†ng xin gi√£n n·ª£ do kh√≥ khƒÉn t√†i ch√≠nh, c·∫ßn x·ª≠ l√Ω th·∫ø n√†o?
    A: H∆∞·ªõng d·∫´n kh√°ch g·ª≠i ƒë∆°n ƒë·ªÅ ngh·ªã gi√£n n·ª£ k√®m gi·∫•y t·ªù ch·ª©ng minh. Chuy·ªÉn h·ªì s∆° v·ªÅ b·ªô ph·∫≠n h·ªó tr·ª£ ƒë·∫∑c bi·ªát.

    Q: Kh√°ch h√†ng ph·∫£n ·ª©ng ti√™u c·ª±c v√† ƒë√≤i ki·ªán, ph·∫£i l√†m g√¨?
    A: Ghi nh·∫≠n v√†o CRM, ng∆∞ng g·ªçi cu·ªôc ƒë√≥ v√† chuy·ªÉn h·ªì s∆° sang b·ªô ph·∫≠n ph√°p l√Ω.

    Q: Kh√°ch h√†ng mu·ªën tr·∫£ g√≥p l·∫°i kho·∫£n n·ª£ qu√° h·∫°n?
    A: Kh√¥ng ƒë·ªìng √Ω tr·ª±c ti·∫øp. Ghi nh·∫≠n thi·ªán ch√≠ v√† g·ª≠i ƒë·ªÅ xu·∫•t v·ªÅ b·ªô ph·∫≠n t√°i c·∫•u tr√∫c h·ª£p ƒë·ªìng.
    """

    # T·∫°o Document t·ª´ vƒÉn b·∫£n tr·ª±c ti·∫øp
    documents = [Document(page_content=sop_text)]
    embeddings = OpenAIEmbeddings()
    db = FAISS.from_documents(documents, embeddings)
    retriever = db.as_retriever()
    chain = RetrievalQA.from_chain_type(llm=OpenAI(temperature=0), retriever=retriever)
    return chain

qa_chain = load_chain()

# Giao di·ªán chat gi·ªëng ChatGPT
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

with st.container():
    for role, message in st.session_state.chat_history:
        if role == "user":
            st.markdown(f"üßë **B·∫°n:** {message}")
        else:
            st.markdown(f"ü§ñ **Chatbot:** {message}")

query = st.chat_input("Nh·∫≠p c√¢u h·ªèi...")

if query:
    st.session_state.chat_history.append(("user", query))
    with st.spinner("ü§î ƒêang t√¨m c√¢u tr·∫£ l·ªùi..."):
        answer = qa_chain.run(query)
    st.session_state.chat_history.append(("bot", answer))
    st.rerun()
